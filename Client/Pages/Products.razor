@page "/products"
@using Microsoft.AspNetCore.WebUtilities
@using Classes;
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<PageTitle>Products - Easy Prices</PageTitle>

<div class="products-container">
    <SearchBarProduct />

    @*
        TEMP:
        Figure out how I am going to map it like .map(()) in React, based on results.
    *@
    @if (@Results.Length == 0)
    {
        <ProductItemSuspense />
    }
    else
    {
        @foreach (var item in Results)
        {
            <ProductItem
                Alt="@item"
                Href=""
                Image=""
                Title=""
                Paragraph=""
                Price=""
                CartStatus=""
            />
        }
        
    }
</div>

@code {
    //public string[] results { get; set; } = {};
    //List<Task> Results = new List<Task>();
    //public string[] Results = { "0", "1", "2" };
    private string[] Results = {};

    protected override async void OnInitialized()
    {
        // Get the value of the query parameter.
        var Uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        QueryHelpers.ParseQuery(Uri.Query).TryGetValue("product", out var Product);

        Console.WriteLine(Product);

        // Finally, get the actual web scraping to work.
        //Scrape.ScrapeAmazon();
        var data = await Http.GetAsync("https://www.amazon.com/s?k=shoes&crid=2VXD1Z67RIWKG&sprefix=shoes%2Caps%2C93&ref=nb_sb_noss_1");

        Console.WriteLine(data);
    }
}
